1. Replace blanks with spaces
For locality, location ID, and LouisianaProtectedArea
Edit cells > transform  > GREL
``` (copy and paste the lines between the "```")
if(isBlank(value)," ",value)
```

2. Edit unspecified entries for locality and locationID(if needed)
locality > Text filter> "unspecified"
locality > Facet > Text facet

3. Big merge/edits
Open any column
Edit column > Add column based on column > jython/python
```
import re

def col_to_list(column):
    # Split up the words in the cell into a list of words.
    colList = column.split()
    # Create a list with words only, no extra characters
    stripped=[re.sub('[,.();:]', '', x) for x in colList]
    # Make all things lowercase for simplier comparison
    stri=[x.lower() for x in stripped]
    return stri

def clean_non_blanks(column):
    # stripping off spaces and semicolons, so it is cleaner when we concatenate columns
    # Transform blank cols into X
    if column == " ": 
        cleanCol = "x"
    else:
        cleanCol = column.strip().strip(";").strip()
    return cleanCol

# Assign each column/cell to a variable
column1 = clean_non_blanks(cells['locationID']['value'])
column2 = clean_non_blanks(cells['locality']['value'])
column3 = clean_non_blanks(cells['LouisianaProtectedArea']['value'])

# Use function to turn each cell into a string of lowercase words to compare
str1=col_to_list(column1)
str2=col_to_list(column2)
str3=col_to_list(column3)

# Replace unspecified columns with blanks. Use the string of the first item in the list to compare to the word 'unspecified'
if str(str1[0]) == 'unspecified':
    column1 = ' '
    str1 = ['x']
# could add line. if str2 > 1. reorder temporarily. 
if str(str2[0]) == 'unspecified':
    column2 = ' '
    str2 = ['x']

# If all columns are blank. New column entry will be "unspecified"
if str(str1[0]) == str(str2[0]) == 'x':
    if str(str3[0]) == 'x':
        newCol = 'unspecified'
    # If column 3 has information. Use this information.
    elif str(str3[0]) != 'x':
        newCol = column3
# Now proceed with comparing columns
else:
    # Check if column1 is found in column2(preserving the order of words)
    is_1_in_2 = any(str1 == str2[i:i+len(str1)] for i in range(len(str2)))
    # If col1 *is* found in col2, use col2 going forward (naming it col1+2)
    if is_1_in_2:
        str12 = str2
        column12 = column2
    # If col1 is *not* in col2, concatenate col1 and col2 into col1+2
    else:
        str12 = str1 + str2
        column12 = column1 + "; " + column2
    # Now check the col1+2 for matches to col3
    is_3_in_12 = any(str3 == str12[i:i+len(str3)] for i in range(len(str12)))
    # If col3 is found in col1+2, use col1+2 going forward, ignoring col3
    if is_3_in_12:
        newCol = column12
    # If col3 is *not* in col1+2, add it.
    else:
        newCol = column12 + "; " + column3

# remove leading and trailing whitespace and semicolons a few times
newcolumn = newCol.strip("x").strip().strip(";").strip()
# make sure that any empty cells should be labeled as unspecified. 
#newcolumn = [str1,str2,str3,newCol]
return newcolumn
```